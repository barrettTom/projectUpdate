#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QLabel, QLineEdit, QPushButton, QFileDialog

from lxml.etree import parse, XMLParser, tostring

import sys
import codecs
import os

from lib.backend import aoiReplace, udtReplace, replaceWholeProgram
from lib.backend import replaceSpecificRoutineRungs

class projectUpdate(QWidget):
    def __init__(self):
        super().__init__()

        grid = QGridLayout()
        self.setLayout(grid)

        grid.addWidget(QLabel("Project:")   ,0,0)
        self.projectEntry = QLineEdit()
        grid.addWidget(self.projectEntry    ,0,1)
        self.projectButton = QPushButton("...")
        self.projectButton.clicked.connect(self.openProject)
        grid.addWidget(self.projectButton   ,0,2)

        grid.addWidget(QLabel("Template:")  ,1,0)
        self.templateEntry = QLineEdit()
        grid.addWidget(self.templateEntry   ,1,1)
        self.templateButton = QPushButton("...")
        self.templateButton.clicked.connect(self.openTemplate)
        grid.addWidget(self.templateButton  ,1,2)

        self.updateButton = QPushButton("Update...")
        self.updateButton.clicked.connect(self.update)
        grid.addWidget(self.updateButton    ,4,1)

        if len(sys.argv) >= 3:
            self.openProject(sys.argv[1])
            self.openTemplate(sys.argv[2])
            if len(sys.argv) == 4:
                self.update(sys.argv[3])

        self.show()

    def openProject(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.projectEntry.setText(path)

    def openTemplate(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.templateEntry.setText(path)

    def save(self, path, project):
        project.write(path+"utf-8", encoding='utf-8', standalone=True)

        with codecs.open(path+"utf-8", "r", "utf-8") as sourceFile:
            with codecs.open(path, "w", "utf-8-sig") as targetFile:
                contents = sourceFile.read()
                targetFile.write(contents)

        os.remove(path+"utf-8")

    def update(self, path=None):
        if not path: path = QFileDialog.getSaveFileName(self)[0]
        if path:
            updatedProject = self.main(self.projectEntry.text(), self.templateEntry.text())

            self.save(path, updatedProject)

            sys.exit()

    def main(self, projectPath, templatePath):

        parser = XMLParser(strip_cdata=False, resolve_entities=False)

        pTree = parse(projectPath, parser=parser)
        tTree = parse(templatePath, parser=parser)

        self.save("backup.L5X", pTree)

        pRoot = pTree.getroot()
        tRoot = tTree.getroot()
        
        changes = []

        original, replacement = aoiReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        original, replacement = udtReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        machineNumber = pRoot.base.split("_")[1][:3]

        with open("filter.txt") as dataFile:
            print(dataFile.read())

        for program in pRoot.iter("Program"):
            name = program.attrib['Name']

            if name.find("G0_POWER_SUPPLY")         != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G0_POWER_SUPPLY", machineNumber)
                routineSpecifics = [{"Name" : "R20_Conditions", 
                                     "Type" : "Replace",
                                     "Rungs": ["0"]}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("G1_DEVICES_GENERAL")    != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "G1_DEVICES_GENERAL", 
                                                                        machineNumber)})
            elif name.find("G2_POWER_SUPPLY_DC")    != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "G2_POWER_SUPPLY_DC", 
                                                                        machineNumber)})
            elif name.find("G3_PLC")                != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G3_PLC", machineNumber)
                routineSpecifics = [{"Name" : "R10_BootCycle",
                                     "Type" : "Keep",
                                     "Rungs": ["2"]}, 
                                    {"Name" : "R11_MotionGroup",
                                     "Type" : "Keep",
                                     "Rungs": ["1"]}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("G3_IO_TEST")           != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "G3_IO_TEST",        
                                                                        machineNumber)})
            elif name.find("G4_OPERATOR_INTERFACE") != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "G4_OPERATOR_INTERFACE",     
                                                                        machineNumber)})
            elif name.find("G5_BUS_STRUCTURES")     != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G5_BUS_STRUCTURES", machineNumber)
                routineSpecifics = [{"Name" : "R22_PIO_Diagnostics",
                                     "Type" : "Keep",
                                     "Rungs": ["1"]},
                                    {"Name" : "R00_S01_Init",
                                     "Type" : "KeepWhole"}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("G6_SAFETY_UNITS")       != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G6_SAFETY_UNITS", machineNumber)
                routineSpecifics = [{"Name" : "R10_EStop",
                                     "Type" : "Keep",
                                     "Rungs": ["3"]}, 
                                    {"Name" : "R11_SafetyGuards",
                                     "Type" : "Replace",
                                     "Rungs": ["0","1","2","3","4","5","7","8","9","10","11","12"]},
                                    {"Name" : "R20_Conditions",
                                     "Type" : "Replace",
                                     "Rungs": ["0","1","3"]}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("G7_CONTROL_CIRCUIT")    != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G7_CONTROL_CIRCUIT", machineNumber)
                routineSpecifics = [{"Name" : "R30_M001_MainAirValve",
                                     "Type" : "Keep",
                                     "Rungs": ["1"]}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("G9_INTERCONNECTIONS")   != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "G9_INTERCONNECTIONS", 
                                                                        machineNumber)})
            elif name.find("G9_SCADA")              != -1:
                replacemenProgram = replaceWholeProgram(tRoot, "G9_SCADA", machineNumber)
                routineSpecifics = [{"Name" : "R03_Parameter_Handler",
                                     "Type" : "KeepWhole"}]
                changes.append({'original'      :   program,
                                'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                replacemenProgram, 
                                                                                routineSpecifics)})
            elif name.find("05_CHECK_SA")           != -1:
                changes.append({'original'      :   program, 
                                'replacement'   :   replaceWholeProgram(tRoot, 
                                                                        "05_CHECK_SA",       
                                                                        machineNumber)})
            else:
                if len(name.split("_")[1]) == 5:
                    print("station")
                else:
                    replacemenProgram = replaceWholeProgram(tRoot, "G9_SCADA", machineNumber)
                    routineSpecifics = [{"Name" : "MainRoutine",
                                         "Type" : "KeepWhole"},
                                        {"Name" : "R00_S01_Init",
                                         "Type" : "KeepWhole"},
                                        {"Name" : "R20_Conditions",
                                         "Type" : "KeepWhole"},
                                        {"Name" : "R20_MachineCtrl",
                                         "Type" : "KeepWhole"},
                                        {"Name" : "R60_EmptyRun",
                                         "Type" : "KeepWhole"},
                                        {"Name" : "R95_Counter",
                                         "Type" : "Replace",
                                         "Rungs": ["0", "1"]}]
                    changes.append({'original'      :   program,
                                    'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                    replacemenProgram, 
                                                                                    routineSpecifics)})
        for change in changes:
            parent = change['original'].getparent()
            parent.replace(change['original'], change['replacement'])

        return pTree

app = QApplication(sys.argv)
masterView = projectUpdate()
sys.exit(app.exec_())

