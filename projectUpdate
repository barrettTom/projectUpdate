#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QLabel, QLineEdit, QPushButton, QFileDialog

from lxml.etree import parse, XMLParser, tostring

import sys
import codecs
import os

from lib.backend import aoiReplace, udtReplace, checkSA, powerSupply
from lib.backend import safetyUnits, busStructures, plc, replaceAllRoutines

class projectUpdate(QWidget):
    def __init__(self):
        super().__init__()

        grid = QGridLayout()
        self.setLayout(grid)

        grid.addWidget(QLabel("Project:")   ,0,0)
        self.projectEntry = QLineEdit()
        grid.addWidget(self.projectEntry    ,0,1)
        self.projectButton = QPushButton("...")
        self.projectButton.clicked.connect(self.openProject)
        grid.addWidget(self.projectButton   ,0,2)

        grid.addWidget(QLabel("Template:")  ,1,0)
        self.templateEntry = QLineEdit()
        grid.addWidget(self.templateEntry   ,1,1)
        self.templateButton = QPushButton("...")
        self.templateButton.clicked.connect(self.openTemplate)
        grid.addWidget(self.templateButton  ,1,2)

        self.updateButton = QPushButton("Update...")
        self.updateButton.clicked.connect(self.update)
        grid.addWidget(self.updateButton    ,4,1)

        if len(sys.argv) >= 3:
            self.openProject(sys.argv[1])
            self.openTemplate(sys.argv[2])
            if len(sys.argv) == 4:
                self.update(sys.argv[3])

        self.show()

    def openProject(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.projectEntry.setText(path)

    def openTemplate(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.templateEntry.setText(path)

    def update(self, path=None):
        if not path: path = QFileDialog.getSaveFileName(self)[0]
        if path:
            updatedProject = self.main(self.projectEntry.text(), self.templateEntry.text())

            updatedProject.write(path+"utf-8", encoding='utf-8', standalone=True)

            with codecs.open(path+"utf-8", "r", "utf-8") as sourceFile:
                with codecs.open(path, "w", "utf-8-sig") as targetFile:
                    contents = sourceFile.read()
                    targetFile.write(contents)

            os.remove(path+"utf-8")
            sys.exit()

    def main(self, projectPath, templatePath):

        parser = XMLParser(strip_cdata=False, resolve_entities=False)

        pTree = parse(projectPath, parser=parser)
        tTree = parse(templatePath, parser=parser)

        pRoot = pTree.getroot()
        tRoot = tTree.getroot()
        
        changes = []

        original, replacement = aoiReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        original, replacement = udtReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        for program in pRoot.iter("Program"):
            name = program.attrib['Name']

            if name.find("G0_POWER_SUPPLY")         != -1:
                powerSupply(program, tRoot, "G0_POWER_SUPPLY")

            elif name.find("G3_PLC")                != -1:
                plc(program, tRoot, "G3_PLC")

            elif name.find("G5_BUS_STRUCTURES")     != -1:
                busStructures(program, tRoot, "G5_BUS_STRUCTURES")
         
            elif name.find("G6_SAFETY_UNITS")       != -1:
                safetyUnits(program, tRoot, "G6_SAFETY_UNITS")
            
            elif name.find("05_CHECK_SA")           != -1:
                changes.append({'original'      :   program, 
                                'replacement'   :   checkSA(program, tRoot, "05_CHECK_SA", parser)})

            elif name.find("G3_I/O_TEST")           != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceAllRoutines(program, tRoot, "G3_I/O_TEST")})

            elif name.find("G1_DEVICES_GENERAL")    != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceAllRoutines(program, tRoot, "G1_DEVICES_GENERAL")})

            elif name.find("G2_POWER_SUPPLY_DC")    != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceAllRoutines(program, tRoot, "G2_POWER_SUPPLY_DC")})

            elif name.find("G4_OPERATOR_INTERFACE") != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceAllRoutines(program, tRoot, "G4_OPERATOR_INTERFACE")})

            elif name.find("G9_INTERCONNECTIONS")   != -1:
                changes.append({'original'      :   program,
                                'replacement'   :   replaceAllRoutines(program, tRoot, "G9_INTERCONNECTIONS")})

        for change in changes:
            parent = change['original'].getparent()
            parent.replace(change['original'], change['replacement'])

        return pTree

app = QApplication(sys.argv)
masterView = projectUpdate()
sys.exit(app.exec_())

