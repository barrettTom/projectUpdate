#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QGridLayout, QLabel, QLineEdit, QPushButton, QFileDialog

from lxml.etree import parse, XMLParser, tostring

import sys
import codecs
import os

from lib.backend import aoiReplace, udtReplace, replaceWholeProgram
from lib.backend import replaceSpecificRoutineRungs, getMachineInfo

class projectUpdate(QWidget):
    def __init__(self):
        super().__init__()

        grid = QGridLayout()
        self.setLayout(grid)

        grid.addWidget(QLabel("Project:")   ,0,0)
        self.projectEntry = QLineEdit()
        grid.addWidget(self.projectEntry    ,0,1)
        self.projectButton = QPushButton("...")
        self.projectButton.clicked.connect(self.openProject)
        grid.addWidget(self.projectButton   ,0,2)

        grid.addWidget(QLabel("Template:")  ,1,0)
        self.templateEntry = QLineEdit()
        grid.addWidget(self.templateEntry   ,1,1)
        self.templateButton = QPushButton("...")
        self.templateButton.clicked.connect(self.openTemplate)
        grid.addWidget(self.templateButton  ,1,2)

        self.updateButton = QPushButton("Update...")
        self.updateButton.clicked.connect(self.update)
        grid.addWidget(self.updateButton    ,4,1)

        if len(sys.argv) >= 3:
            self.openProject(sys.argv[1])
            self.openTemplate(sys.argv[2])
            if len(sys.argv) == 4:
                self.update(sys.argv[3])

        self.show()

    def openProject(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.projectEntry.setText(path)

    def openTemplate(self, path=None):
        if not path: path = QFileDialog.getOpenFileName(self)[0]
        if path: self.templateEntry.setText(path)

    def save(self, path, project):
        project.write(path+"utf-8", encoding='utf-8', standalone=True)

        with codecs.open(path+"utf-8", "r", "utf-8") as sourceFile:
            with codecs.open(path, "w", "utf-8-sig") as targetFile:
                contents = sourceFile.read()
                contents = contents.replace("\n","\r\n")
                contents = contents.replace("&#246;", "รถ")
                targetFile.write(contents)

        os.remove(path+"utf-8")

    def update(self, path=None):
        if not path: path = QFileDialog.getSaveFileName(self)[0]
        if path:
            updatedProject = self.main(self.projectEntry.text(), self.templateEntry.text())

            self.save(path, updatedProject)

            sys.exit()

    def readFilter(self):
        filterPrograms = []

        with open("filter.txt", "r") as dataFile:
            lines = dataFile.readlines()
            i = 0
            while i < len(lines) - 1:
                program = {"Name"       : lines[i].strip(),
                           "Routines"   : []}
                while True:
                    i += 1
                    if i > len(lines) - 1:
                        break
                    if lines[i] == "\n":
                        break
                    line = lines[i].split(",")
                    if len(line) == 1:
                        routine = line[0].strip()
                    else:
                        routine = {'Type' : line[1].strip(),
                                   'Name' : line[0].strip()}
                        if len(line) > 2:
                            routine['Rungs'] = [n.strip() for n in line[2:]]

                    program["Routines"].append(routine)

                filterPrograms.append(program)
                i += 1

        return filterPrograms

    def main(self, projectPath, templatePath):

        parser = XMLParser(strip_cdata=False, resolve_entities=False)

        pTree = parse(projectPath, parser=parser)
        tTree = parse(templatePath, parser=parser)

        pRoot = pTree.getroot()
        tRoot = tTree.getroot()

        changes = []

        original, replacement = aoiReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        original, replacement = udtReplace(pRoot, tRoot)
        changes.append({'original'      : original,
                        'replacement'   : replacement})

        machineNumber, machineName = getMachineInfo(pRoot)

        filterPrograms = self.readFilter()

        for program in pRoot.iter("Program"):
            name = program.attrib['Name']
            found = False
            for filterProgram in filterPrograms:
                if name.find(filterProgram["Name"]) != -1:
                    found = True
                    if filterProgram["Routines"][0] == 'All':
                        changes.append({'original'      :   program,
                                        'replacement'   :   replaceWholeProgram(tRoot, 
                                                                                filterProgram['Name'], 
                                                                                machineNumber,
                                                                                machineName)})
                    else:
                        routineSpecifics = []
                        for routineSpecific in filterProgram["Routines"]:
                            routineSpecifics.append(routineSpecific)
                        replacementProgram = replaceWholeProgram(tRoot, filterProgram['Name'], machineNumber, machineName)
                        changes.append({'original'      :   program,
                                        'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                        replacementProgram, 
                                                                                        routineSpecifics)})
            if not found:
                if len(name.split("_")[1]) == 3:
                    for filterProgram in filterPrograms:
                        if filterProgram["Name"] == "MACHINE_NAME":
                            routineSpecifics = []
                            for routineSpecific in filterProgram["Routines"]:
                                routineSpecifics.append(routineSpecific)
                            replacementProgram = replaceWholeProgram(tRoot, filterProgram['Name'], machineNumber, machineName)
                            changes.append({'original'      :   program,
                                            'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                            replacementProgram, 
                                                                                            routineSpecifics)})
                else:
                    for filterProgram in filterPrograms:
                        if filterProgram["Name"] == "STATION":
                            routineSpecifics = []
                            for routineSpecific in filterProgram["Routines"]:
                                routineSpecifics.append(routineSpecific)
                            replacementProgram = replaceWholeProgram(tRoot, filterProgram['Name'], machineNumber, machineName)
                            changes.append({'original'      :   program,
                                            'replacement'   :   replaceSpecificRoutineRungs(program,
                                                                                            replacementProgram, 
                                                                                            routineSpecifics)})
        for change in changes:
            parent = change['original'].getparent()
            parent.replace(change['original'], change['replacement'])

        return pTree

app = QApplication(sys.argv)
masterView = projectUpdate()
sys.exit(app.exec_())

